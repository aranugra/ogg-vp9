diff --git a/libavformat/Makefile b/libavformat/Makefile
index 6c6b779080..94465d4a32 100644
--- a/libavformat/Makefile
+++ b/libavformat/Makefile
@@ -411,6 +411,7 @@ OBJS-$(CONFIG_OGG_DEMUXER)               += oggdec.o         \
                                             oggparsetheora.o \
                                             oggparsevorbis.o \
                                             oggparsevp8.o    \
+                                            oggparsevp9.o    \
                                             replaygain.o     \
                                             vorbiscomment.o  \
                                             flac_picture.o
diff --git a/libavformat/oggdec.c b/libavformat/oggdec.c
index 3b19e0bd89..89fe2b0cc4 100644
--- a/libavformat/oggdec.c
+++ b/libavformat/oggdec.c
@@ -50,6 +50,7 @@ static const struct ogg_codec * const ogg_codecs[] = {
     &ff_celt_codec,
     &ff_opus_codec,
     &ff_vp8_codec,
+    &ff_vp9_codec,
     &ff_old_dirac_codec,
     &ff_old_flac_codec,
     &ff_ogm_video_codec,
@@ -795,6 +796,33 @@ static int64_t ogg_calc_pts(AVFormatContext *s, int idx, int64_t *dts)
     return pts;
 }
 
+static unsigned vp9_keyframe_flag(AVFormatContext *s, uint8_t *data) {
+    unsigned frame_marker, version, high, show_ext_frame;
+    unsigned frame_type = 1; /* 1 is inter frame */
+    unsigned header = data[0];
+
+    frame_marker = (header >> 6) & 3;
+    if (frame_marker != 2) {
+        av_log(s, AV_LOG_WARNING, "Unexpected frame marker for VP9: %u\n", frame_marker);
+    }
+
+    version = (header >> 5) & 1;
+    high = (header >> 4) & 1;
+
+    if (((high << 1) | version) == 3) {
+        show_ext_frame = (header >> 2) & 1;
+        if (!show_ext_frame) {
+            frame_type = (header >> 1) & 1;
+        }
+    } else {
+        show_ext_frame = (header >> 3) & 1;
+        if (!show_ext_frame) {
+            frame_type = (header >> 2) & 1;
+        }
+    }
+    return frame_type;
+}
+
 static void ogg_validate_keyframe(AVFormatContext *s, int idx, int pstart, int psize)
 {
     struct ogg *ogg = s->priv_data;
@@ -807,6 +835,10 @@ static void ogg_validate_keyframe(AVFormatContext *s, int idx, int pstart, int p
         break;
         case AV_CODEC_ID_VP8:
             invalid = !!(os->pflags & AV_PKT_FLAG_KEY) != !(os->buf[pstart] & 1);
+        break;
+        case AV_CODEC_ID_VP9:
+            invalid = !!(os->pflags & AV_PKT_FLAG_KEY) != !vp9_keyframe_flag(s, os->buf + pstart);
+        break;
         }
         if (invalid) {
             os->pflags ^= AV_PKT_FLAG_KEY;
diff --git a/libavformat/oggdec.h b/libavformat/oggdec.h
index 43df23f4cb..d316391156 100644
--- a/libavformat/oggdec.h
+++ b/libavformat/oggdec.h
@@ -128,6 +128,7 @@ extern const struct ogg_codec ff_speex_codec;
 extern const struct ogg_codec ff_theora_codec;
 extern const struct ogg_codec ff_vorbis_codec;
 extern const struct ogg_codec ff_vp8_codec;
+extern const struct ogg_codec ff_vp9_codec;
 
 /**
  * Parse Vorbis comments
diff --git a/libavformat/oggenc.c b/libavformat/oggenc.c
index ae0705ba54..01919a2fc8 100644
--- a/libavformat/oggenc.c
+++ b/libavformat/oggenc.c
@@ -58,7 +58,7 @@ typedef struct OGGStreamContext {
     int64_t last_kf_pts;
     int vrev;
     /* for VP8 granule */
-    int isvp8;
+    int isvpx;
     int eos;
     unsigned page_count; ///< number of page buffered
     OGGPage page; ///< current page
@@ -132,7 +132,7 @@ static void ogg_write_page(AVFormatContext *s, OGGPage *page, int extra_flags)
 static int ogg_key_granule(OGGStreamContext *oggstream, int64_t granule)
 {
     return (oggstream->kfgshift && !(granule & ((1<<oggstream->kfgshift)-1))) ||
-           (oggstream->isvp8    && !((granule >> 3) & 0x07ffffff));
+           (oggstream->isvpx    && !((granule >> 3) & 0x07ffffff));
 }
 
 static int64_t ogg_granule_to_timestamp(OGGStreamContext *oggstream, int64_t granule)
@@ -140,7 +140,7 @@ static int64_t ogg_granule_to_timestamp(OGGStreamContext *oggstream, int64_t gra
     if (oggstream->kfgshift)
         return (granule>>oggstream->kfgshift) +
             (granule & ((1<<oggstream->kfgshift)-1));
-    else if (oggstream->isvp8)
+    else if (oggstream->isvpx)
         return granule >> 32;
     else
         return granule;
@@ -211,7 +211,8 @@ static int ogg_buffer_data(AVFormatContext *s, AVStream *st,
     // them as such, otherwise seeking will not work correctly at the very
     // least with old libogg versions.
     // Do not try to flush header packets though, that will create broken files.
-    if ((st->codecpar->codec_id == AV_CODEC_ID_THEORA || st->codecpar->codec_id == AV_CODEC_ID_VP8) && !header &&
+    if ((st->codecpar->codec_id == AV_CODEC_ID_THEORA || st->codecpar->codec_id == AV_CODEC_ID_VP8 ||
+        st->codecpar->codec_id == AV_CODEC_ID_VP9) && !header &&
         (ogg_granule_to_timestamp(oggstream, granule) >
          ogg_granule_to_timestamp(oggstream, oggstream->last_granule) + 1 ||
          ogg_key_granule(oggstream, granule))) {
@@ -441,7 +442,58 @@ static int ogg_build_vp8_headers(AVFormatContext *s, AVStream *st,
         bytestream_put_byte(&p, 0x20);
     }
 
-    oggstream->isvp8 = 1;
+    oggstream->isvpx = 1;
+
+    return 0;
+}
+
+#define VP9_HEADER_SIZE 26
+
+static int ogg_build_vp9_headers(AVFormatContext *s, AVStream *st,
+                                 OGGStreamContext *oggstream, int bitexact)
+{
+    AVCodecParameters *par = st->codecpar;
+    uint8_t *p;
+
+    /* first packet: VP8 header */
+    p = av_mallocz(VP9_HEADER_SIZE);
+    if (!p)
+        return AVERROR(ENOMEM);
+    oggstream->header[0] = p;
+    oggstream->header_len[0] = VP9_HEADER_SIZE;
+    bytestream_put_byte(&p, 0x4f); // HDRID
+    bytestream_put_buffer(&p, "VP90", 4); // Identifier
+    bytestream_put_byte(&p, 1); // HDRTYP
+    bytestream_put_byte(&p, 1); // VMAJ
+    bytestream_put_byte(&p, 0); // VMIN
+    bytestream_put_be16(&p, par->width);
+    bytestream_put_be16(&p, par->height);
+    bytestream_put_be24(&p, par->sample_aspect_ratio.num);
+    bytestream_put_be24(&p, par->sample_aspect_ratio.den);
+    if (st->r_frame_rate.num > 0 && st->r_frame_rate.den > 0) {
+        // OggVP8 requires pts to increase by 1 per visible frame, so use the least common
+        // multiple framerate if available.
+        av_log(s, AV_LOG_DEBUG, "Changing time base from %d/%d to %d/%d\n",
+               st->time_base.num, st->time_base.den,
+               st->r_frame_rate.den, st->r_frame_rate.num);
+        avpriv_set_pts_info(st, 64, st->r_frame_rate.den, st->r_frame_rate.num);
+    }
+    bytestream_put_be32(&p, st->time_base.den);
+    bytestream_put_be32(&p, st->time_base.num);
+
+    /* optional second packet: VorbisComment */
+    if (av_dict_get(st->metadata, "", NULL, AV_DICT_IGNORE_SUFFIX)) {
+        p = ogg_write_vorbiscomment(7, bitexact, &oggstream->header_len[1], &st->metadata, 0, NULL, 0);
+        if (!p)
+            return AVERROR(ENOMEM);
+        oggstream->header[1] = p;
+        bytestream_put_byte(&p, 0x4f); // HDRID
+        bytestream_put_buffer(&p, "VP90", 4); // Identifier
+        bytestream_put_byte(&p, 2); // HDRTYP
+        bytestream_put_byte(&p, 0x20);
+    }
+
+    oggstream->isvpx = 1;
 
     return 0;
 }
@@ -494,13 +546,15 @@ static int ogg_init(AVFormatContext *s)
             st->codecpar->codec_id != AV_CODEC_ID_SPEEX  &&
             st->codecpar->codec_id != AV_CODEC_ID_FLAC   &&
             st->codecpar->codec_id != AV_CODEC_ID_OPUS   &&
-            st->codecpar->codec_id != AV_CODEC_ID_VP8) {
+            st->codecpar->codec_id != AV_CODEC_ID_VP8    &&
+            st->codecpar->codec_id != AV_CODEC_ID_VP9) {
             av_log(s, AV_LOG_ERROR, "Unsupported codec id in stream %d\n", i);
             return AVERROR(EINVAL);
         }
 
         if ((!st->codecpar->extradata || !st->codecpar->extradata_size) &&
-            st->codecpar->codec_id != AV_CODEC_ID_VP8) {
+            st->codecpar->codec_id != AV_CODEC_ID_VP8 &&
+            st->codecpar->codec_id != AV_CODEC_ID_VP9) {
             av_log(s, AV_LOG_ERROR, "No extradata present\n");
             return AVERROR_INVALIDDATA;
         }
@@ -555,6 +609,13 @@ static int ogg_init(AVFormatContext *s)
                 av_log(s, AV_LOG_ERROR, "Error writing VP8 headers\n");
                 return err;
             }
+        } else if (st->codecpar->codec_id == AV_CODEC_ID_VP9) {
+            int err = ogg_build_vp9_headers(s, st, oggstream,
+                                            s->flags & AVFMT_FLAG_BITEXACT);
+            if (err) {
+                av_log(s, AV_LOG_ERROR, "Error writing VP9 headers\n");
+                return err;
+            }
         } else {
             uint8_t *p;
             const char *cstr = st->codecpar->codec_id == AV_CODEC_ID_VORBIS ? "vorbis" : "theora";
@@ -665,6 +726,50 @@ static int ogg_write_packet_internal(AVFormatContext *s, AVPacket *pkt)
         invcnt  = visible ? 3 : (invcnt == 3 ? 0 : invcnt + 1);
         dist    = (pkt->flags & AV_PKT_FLAG_KEY) ? 0 : ((oggstream->last_granule >> 3) & 0x07ffffff) + 1;
 
+        granule = (pts << 32) | (invcnt << 30) | (dist << 3);
+    } else if (st->codecpar->codec_id == AV_CODEC_ID_VP9) {
+        unsigned frame_marker, version, high, profile, show_ext_frame, reserved;
+        unsigned frame_type = 1, visible = 1;
+        unsigned header = pkt->data[0];
+        int64_t pts, invcnt, dist;
+
+        /* See vp9 spec for uncompressed frame header */
+        frame_marker = (header >> 6) & 3; /* first 2 bits */
+        if (frame_marker != 2) {
+            av_log(s, AV_LOG_WARNING, "Unexpected frame marker for VP9: %u\n", frame_marker);
+        }
+
+        version = (header >> 5) & 1; /* next 1 bit */
+        high = (header >> 4) & 1; /* next 1 bit */
+        profile = (high << 1) + version;
+        if (profile == 3) {
+            /* must be zero */
+            reserved = (header >> 3) & 1;
+            if (reserved != 0) {
+                av_log(s, AV_LOG_WARNING, "VP9 reserved bit is set for profile %u\n", profile);
+            }
+            show_ext_frame = (header >> 2) & 1;
+            if (!show_ext_frame) {
+                frame_type = (header >> 1) & 1;
+                visible = header & 1;
+            }
+        } else {
+            show_ext_frame = (header >> 3) & 1;
+            if (!show_ext_frame) {
+                frame_type = (header >> 2) & 1;
+                visible = (header >> 1) & 1;
+            }
+        }
+
+        if ((pkt->flags & AV_PKT_FLAG_KEY) == frame_type) {
+            av_log(s, AV_LOG_WARNING, "Unexpected frame type for VP9\n");
+        }
+
+        pts     = pkt->pts + pkt->duration;
+        invcnt  = (oggstream->last_granule >> 30) & 3;
+        invcnt  = visible ? 3 : (invcnt == 3 ? 0 : invcnt + 1);
+        dist    = (pkt->flags & AV_PKT_FLAG_KEY) ? 0 : ((oggstream->last_granule >> 3) & 0x07ffffff) + 1;
+
         granule = (pts << 32) | (invcnt << 30) | (dist << 3);
     } else
         granule = pkt->pts + pkt->duration;
@@ -731,7 +836,8 @@ static void ogg_free(AVFormatContext *s)
         if (st->codecpar->codec_id == AV_CODEC_ID_FLAC ||
             st->codecpar->codec_id == AV_CODEC_ID_SPEEX ||
             st->codecpar->codec_id == AV_CODEC_ID_OPUS ||
-            st->codecpar->codec_id == AV_CODEC_ID_VP8) {
+            st->codecpar->codec_id == AV_CODEC_ID_VP8 ||
+            st->codecpar->codec_id == AV_CODEC_ID_VP9){
             av_freep(&oggstream->header[0]);
         }
         av_freep(&oggstream->header[1]);
diff --git a/libavformat/oggparsevp9.c b/libavformat/oggparsevp9.c
new file mode 100644
index 0000000000..4ee2279f80
--- /dev/null
+++ b/libavformat/oggparsevp9.c
@@ -0,0 +1,115 @@
+#include "libavutil/intreadwrite.h"
+
+#include "avformat.h"
+#include "internal.h"
+#include "oggdec.h"
+
+#define VP9_HEADER_SIZE 26
+
+static int vp9_header(AVFormatContext *s, int idx)
+{
+    struct ogg *ogg = s->priv_data;
+    struct ogg_stream *os = ogg->streams + idx;
+    uint8_t *p = os->buf + os->pstart;
+    AVStream *st = s->streams[idx];
+    AVRational framerate;
+
+    if (os->psize < 7 || p[0] != 0x4f)
+        return 0;
+
+    switch (p[5]){
+    case 0x01:
+        if (os->psize < VP9_HEADER_SIZE) {
+            av_log(s, AV_LOG_ERROR, "Invalid OggVP9 header packet\n");
+            return AVERROR_INVALIDDATA;
+        }
+
+        if (p[6] != 1) {
+            av_log(s, AV_LOG_WARNING,
+                   "Unknown OggVP9 version %d.%d\n", p[6], p[7]);
+            return AVERROR_INVALIDDATA;
+        }
+
+        st->codecpar->width         = AV_RB16(p +  8);
+        st->codecpar->height        = AV_RB16(p + 10);
+        st->sample_aspect_ratio.num = AV_RB24(p + 12);
+        st->sample_aspect_ratio.den = AV_RB24(p + 15);
+        framerate.num               = AV_RB32(p + 18);
+        framerate.den               = AV_RB32(p + 22);
+
+        avpriv_set_pts_info(st, 64, framerate.den, framerate.num);
+        st->codecpar->codec_type = AVMEDIA_TYPE_VIDEO;
+        st->codecpar->codec_id   = AV_CODEC_ID_VP9;
+        ffstream(st)->need_parsing = AVSTREAM_PARSE_HEADERS;
+        break;
+    case 0x02:
+        if (p[6] != 0x20)
+            return AVERROR_INVALIDDATA;
+        ff_vorbis_stream_comment(s, st, p + 7, os->psize - 7);
+        break;
+    default:
+        av_log(s, AV_LOG_ERROR, "Unknown VP9 header type 0x%02X\n", p[5]);
+        return AVERROR_INVALIDDATA;
+    }
+
+    return 1;
+}
+
+static uint64_t vp9_gptopts(AVFormatContext *s, int idx,
+                            uint64_t granule, int64_t *dts)
+{
+    struct ogg *ogg = s->priv_data;
+    struct ogg_stream *os = ogg->streams + idx;
+
+    uint64_t pts  = granule >> 32;
+    uint32_t dist = (granule >>  3) & 0x07ffffff;
+
+    if (!dist)
+        os->pflags |= AV_PKT_FLAG_KEY;
+
+    if (dts)
+        *dts = pts;
+
+    return pts;
+}
+
+static int vp9_packet(AVFormatContext *s, int idx)
+{
+    struct ogg *ogg = s->priv_data;
+    struct ogg_stream *os = ogg->streams + idx;
+
+    if ((!os->lastpts || os->lastpts == AV_NOPTS_VALUE) && !(os->flags & OGG_FLAG_EOS)) {
+        int seg;
+        int duration;
+
+        seg = os->segp;
+        duration = 1;
+        for (; seg < os->nsegs; seg++) {
+            if (os->segments[seg] < 255) {
+                duration ++;
+            }
+        }
+        os->lastpts = os->lastdts = vp9_gptopts(s, idx, os->granule, NULL) - duration;
+        if(s->streams[idx]->start_time == AV_NOPTS_VALUE) {
+            s->streams[idx]->start_time = os->lastpts;
+            if (s->streams[idx]->duration && s->streams[idx]->duration != AV_NOPTS_VALUE)
+                s->streams[idx]->duration -= s->streams[idx]->start_time;
+        }
+    }
+
+    if (os->psize > 0) {
+        os->pduration = 1;
+    }
+
+    return 0;
+}
+
+
+const struct ogg_codec ff_vp9_codec = {
+    .magic     = "OVP90",
+    .magicsize = 5,
+    .header    = vp9_header,
+    .packet    = vp9_packet,
+    .gptopts   = vp9_gptopts,
+    .nb_header = 1,
+};
